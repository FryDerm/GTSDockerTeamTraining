<?xml version="1.0"?>
<doc>
  <assembly>
    <name>vm.Aspects.Diagnostics.ObjectDumper</name>
  </assembly>
  <members>
    <member name="T:vm.Aspects.Diagnostics.ClassDumpData">
      <summary>
            Encapsulates a pair of a class or struct metadata and the corresponding DumpAttribute.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ClassDumpData.Metadata">
      <summary>
            Gets or sets the metadata associated with a given class or struct (which may be the class or struct itself).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ClassDumpData.DumpAttribute">
      <summary>
            Gets or sets the dump attribute applied on a given class or struct.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.DumpNullValues(vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Implements the instance over type priority rule for the <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpNullValues" /> property.
            </summary>
      <param name="instanceAttribute">The instance associated attribute.</param>
      <returns>
            The property value that should be in effect.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.DefaultProperty(vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Implements the instance over type priority rule for the <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DefaultProperty" /> property.
            </summary>
      <param name="instanceAttribute">The attribute associated with the instance.</param>
      <returns>
            The property value that should be in effect.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.RecurseDump(vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Implements the instance over type priority rule for the <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.RecurseDump" /> property.
            </summary>
      <param name="instanceAttribute">The instance associated attribute.</param>
      <returns>
            The property value that should be in effect. Never returns <see cref="F:vm.Aspects.Diagnostics.ShouldDump.Default" />.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.Equals(vm.Aspects.Diagnostics.ClassDumpData)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">A copy of another object of type <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> to compare with this object.</param>
      <returns>
        <c>true</c> if the values of the fields are equal; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.Equals(System.Object)">
      <summary>
            Determines whether this <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> instance is equal to the specified <see cref="T:System.Object" /> reference.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> reference to compare with this <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> object.</param>
      <returns>
        <c>false</c> if <paramref name="obj" /> is equal to <c>null</c>, otherwise
            <c>true</c> if <paramref name="obj" /> refers to <c>this</c> object, otherwise
            <c>true</c> if <paramref name="obj" /><i>is an instance of</i><see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> and 
            the fields values of the current object and the <paramref name="obj" /> are equal by value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.GetHashCode">
      <summary>
            Serves as a hash function for the objects of <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> and its derived types.
            </summary>
      <returns>A hash code for the current <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> instance.</returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.op_Equality(vm.Aspects.Diagnostics.ClassDumpData,vm.Aspects.Diagnostics.ClassDumpData)">
      <summary>
            Compares two <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> objects.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the objects are considered to be equal (<see cref="M:IEquatable.Equals{ClassDumpData}" />);
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassDumpData.op_Inequality(vm.Aspects.Diagnostics.ClassDumpData,vm.Aspects.Diagnostics.ClassDumpData)">
      <summary>
            Compares two <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> objects.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the objects are not considered to be equal (<see cref="M:IEquatable.Equals{ClassDumpData}" />);
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:vm.Aspects.Diagnostics.ClassMetadataRegistrar">
      <summary>
            Class ClassMetadataRegistrar - helper for registering external dump metadata and type related <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" />-s in a fluent API style.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataRegistrar.RegisterMetadata">
      <summary>
            Registers the metadata defined in <see cref="N:vm.Aspects.Diagnostics.ExternalMetadata" />. 
            Allows for chaining further registering more dump metadata.
            </summary>
      <returns>ClassMetadataRegistrar.</returns>
      <ensures csharp="Contract.Result&lt;vm.Aspects.Diagnostics.ClassMetadataRegistrar&gt;() != null" vb="Contract.Result(Of vm.Aspects.Diagnostics.ClassMetadataRegistrar)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataRegistrar.Register(System.Type,System.Type,vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <summary>
            Registers the dump metadata and <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> instance related to the specified type.
            </summary>
      <param name="type">The type for which the metadata is being registered.</param>
      <param name="metadataType">The dump metadata type.</param>
      <param name="dumpAttribute">The dump attribute.</param>
      <param name="replace">
            If set to <see langword="false" /> and there is already dump metadata associated with the <paramref name="type" />
            the method will throw exception of type <see cref="T:System.InvalidOperationException" />;
            otherwise it will silently override the existing metadata with <paramref name="metadataType" /> and <paramref name="dumpAttribute" />.
            </param>
      <returns>The current instance of ClassMetadataRegistrar.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="replace" /> is <see langword="false" /> and there is already metadata associated with the <paramref name="type" />.
            </exception>
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="Contract.Result&lt;vm.Aspects.Diagnostics.ClassMetadataRegistrar&gt;() != null" vb="Contract.Result(Of vm.Aspects.Diagnostics.ClassMetadataRegistrar)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataRegistrar.Register``2(vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <summary>
            Registers the dump metadata and <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> instance related to the specified type.
            </summary>
      <typeparam name="T">The type for which the metadata is being registered.</typeparam>
      <typeparam name="TMetadata">The dump metadata type.</typeparam>
      <param name="dumpAttribute">The dump attribute.</param>
      <param name="replace">
            If set to <see langword="false" /> and there is already dump metadata associated with the <typeparamref name="T" />
            the method will throw exception of type <see cref="T:System.InvalidOperationException" />;
            otherwise it will silently override the existing metadata with <typeparamref name="TMetadata" /> and the <paramref name="dumpAttribute" />.
            </param>
      <returns>The current instance of ClassMetadataRegistrar.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="replace" /> is <see langword="false" /> and there is already metadata associated with the <typeparamref name="T" />.
            </exception>
      <ensures csharp="Contract.Result&lt;vm.Aspects.Diagnostics.ClassMetadataRegistrar&gt;() != null" vb="Contract.Result(Of vm.Aspects.Diagnostics.ClassMetadataRegistrar)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataRegistrar.Register``1(vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <summary>
            Registers the specified dump attribute.
            </summary>
      <typeparam name="T">The type for which the dump attribute is being registered.</typeparam>
      <param name="dumpAttribute">The dump attribute.</param>
      <param name="replace">
            If set to <see langword="false" /> and there is already dump metadata associated with the <typeparamref name="T" />
            the method will throw exception of type <see cref="T:System.InvalidOperationException" />;
            otherwise it will silently override the existing metadata with itself - <typeparamref name="T" /> and the <paramref name="dumpAttribute" />.
            </param>
      <returns>The current instance of ClassMetadataRegistrar.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="replace" /> is <see langword="false" /> and there is already metadata associated with the <typeparamref name="T" />.
            </exception>
      <ensures csharp="Contract.Result&lt;vm.Aspects.Diagnostics.ClassMetadataRegistrar&gt;() != null" vb="Contract.Result(Of vm.Aspects.Diagnostics.ClassMetadataRegistrar)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:vm.Aspects.Diagnostics.ClassMetadataResolver">
      <summary>
            Primary responsibility of the class is to retrieve the metadata (the buddy class) and DumpAttribute instance associated with a class to be
            dumped. For speed the class encapsulates a cache of type (usually class or struct) and the associated <see cref="T:vm.Aspects.Diagnostics.ClassDumpData" /> which 
            contains the buddy and DumpAttribute instance. Allows to define externally metadata and a DumpAttribute on a class/struct level - useful for 
            FCL and 3rd party classes for which we do not have access to their source code.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ClassMetadataResolver.TypesDumpDataSync">
      <summary>
            Synchronizes the cache of dump metadata (buddy classes).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ClassMetadataResolver.TypesDumpData">
      <summary>
            Gets or sets the cache of dump metadata (buddy class) defined explicitly either in the initializer above or by calling SetMetadataType.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.SetClassDumpData(System.Type,System.Type,vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <summary>
            Adds buddy type and dump attribute for classes which we do not have access to, e.g. Exception.
            </summary>
      <param name="type">The type for which to set buddy type and dump attribute.</param>
      <param name="metadata">The metadata type (buddy class).</param>
      <param name="dumpAttribute">The dump attribute.</param>
      <param name="replace">
            If set to <see langword="false" /> and there is already dump metadata associated with the <paramref name="type" />
            the method will throw exception of type <see cref="T:System.InvalidOperationException" />;
            otherwise it will silently override the existing metadata with <paramref name="metadata" /> and <paramref name="dumpAttribute" />.
            </param>
      <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="replace" /> is <see langword="false" /> and there is already metadata associated with the <paramref name="type" />.
            </exception>
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.GetClassDumpData(System.Type)">
      <summary>
            Gets the dump attribute either from the type itself or if the class is applied <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> from the specified class.
            </summary>
      <param name="type">The type.</param>
      <returns>The <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> reference or <c>null</c>.</returns>
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DefaultServiceLocator">
      <summary>
            The DefaultServiceLocator wraps the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator" />.
            The idea is that if the users have IoC container which has implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator" />
            (as most do - see https://commonservicelocator.codeplex.com/) they could put their implementation of some required services in the container 
            of their choice, otherwise in either case the dumper will resolve the services from this class.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DefaultServiceLocator.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type. Not used internally
            </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:vm.Aspects.Diagnostics.ShouldDump">
      <summary>
            Enum ShouldDump specifies the possible options for whether to dump or not specific element.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ShouldDump.Default">
      <summary>
            Follow the default setting for the element.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ShouldDump.Dump">
      <summary>
            Dump the element.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ShouldDump.Skip">
      <summary>
            Do not dump the element.
            </summary>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpAttribute">
      <summary>
            The attribute properties control certain aspects of the objects' dump (including primitive ones) and their properties (if any), 
            including the items of sequences.  
            </summary>
      <remarks>
            Note that some properties of this attribute are applicable to classes, struct-s and properties (e.g. <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpNullValues" /> or 
            <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.RecurseDump" />), and others to properties only. An instance of a class or struct may be associated with two <c>DumpAttributes</c>: one 
            coming from the type or the meta data type of the instance (attribute applied on the class or the meta data class definition) and one from the 
            instance itself - e.g. from a property containing the instance or explicitly passed to the <see cref="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dump(System.Object,System.Type,vm.Aspects.Diagnostics.DumpAttribute)" />. In these 
            cases not <c>null</c> class applicable properties from the instance attribute take precedence over the class attribute properties.
            </remarks>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpAttribute.Default">
      <summary>
            The default dump attribute applied to instances and properties with no <c>DumpAttribute</c> specified.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpAttribute.DefaultMaxDepth">
      <summary>
            The default maximum depth of aggregated objects dumping: 10. The depth is counted from the outermost instance.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpAttribute.DefaultMaxElements">
      <summary>
            The default maximum number of arrays' and collections' elements to be dumped: 10.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpAttribute.DefaultOrder">
      <summary>
            The default dump order for properties: <c>int.MaxValue</c>, i.e. dump properties with unspecified order in alphabetical order before the 
            properties with negative order.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> class with default values.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> class with explicit dump order.
            </summary>
      <param name="order">
            The dump order.
            </param>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> class and specifies whether to dump the class or property or not.
            </summary>
      <param name="display">
            If set to <c>true</c> dumps the class or property; otherwise does not dump it.
            </param>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.DumpNullValues">
      <summary>
            Gets or sets a value indicating whether to dump or skip properties with <c>null</c> value.
            </summary>
      <remarks>
            Applies to classes, struct-s and properties.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.RecurseDump">
      <summary>
            Gets or sets a value indicating whether the element should be recursively dumped. Default value is <c>RecurseDump.Dump</c> - recurse into.
            <para>
            When applied to a class with value of <c>RecurseDump.Skip</c> it will suppress dumping the class's properties with exception of 
            the property specified by the property <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DefaultProperty" /> of this attribute.
            </para><para>
            When applied to a property of non-sequence type with a value of <c>RecurseDump.Skip</c> it will suppress dumping of the associated 
            instance.
            </para><para>
            When applied to a property of sequence type the attribute will suppress dumping the sequence's items.
            </para></summary>
      <remarks>
            Applicable to classes, struct-s and properties of class, struct or sequence types.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.DefaultProperty">
      <summary>
            Gets or sets the name of the only property (the representative property) which should be dumped if <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.RecurseDump" /> is set to
            <c>RecurseDump.Skip</c>.
            </summary>
      <remarks>
            Applicable to classes and struct-s only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.MaxDepth">
      <summary>
            This property is applicable only to the outermost class or struct and gets or sets the maximum depth of nested instances to be dumped. 
            The default maximum depth is 10.
            </summary>
      <remarks>
            Applicable to classes and struct-s at the top level of dumping recursion only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.Enumerate">
      <summary>
            Gets or sets a flag whether to enumerate the elements in the object, if it implements IEnumerable.
            The default for arrays and sequences of the FCL is <see cref="F:vm.Aspects.Diagnostics.ShouldDump.Dump" /> and for custom classes - <see cref="F:vm.Aspects.Diagnostics.ShouldDump.Skip" />.
            <seealso cref="F:vm.Aspects.Diagnostics.DumpAttribute.DefaultMaxElements" />.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.Order">
      <summary>
            Specifies the dump order of a property. The properties are dumped in the following order: first are dumped properties with non-negative 
            <c>Order</c> in ascending order (0, 1, 2, etc.), then are dumped properties with unspecified <c>Order</c> (because their default order is 
            int.MaxValue); then are dumped the base class properties and in the end are dumped the properties with negative order in descending order (-1, 
            -2, etc.). Properties with equal <c>Order</c>-s are dumped in alphabetical order.
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.Skip">
      <summary>
            Gets or sets a value indicating whether the property to which this attribute is applied to should be skipped in the dump. 
            The default for public elements is <c>ShouldDump.Dump</c> and for protected or private <c>ShouldDump.Skip</c>.
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.Mask">
      <summary>
            Gets or sets a flag whether the actual value should be masked. Use it for properties whose values should not be logged, e.g. passwords 
            and PII fields (SSN, DL#, etc.)
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.MaskValue">
      <summary>
            Gets or sets the string value which should be output in the dump instead of the actual value. Use it for properties whose values should 
            not be logged, e.g. passwords and PII fields (SSN, DL#, etc.) The default is "******".
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
      <getter>
        <ensures csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.MaxLength">
      <summary>
            If the property is of string type, gets or sets the maximum number of characters to be dumped from the value. Non-positive numbers, 
            (including 0 - the default) will dump the entire string no matter how long the string might be. 
            <para>
            For arrays the default value of 0 means to dump no-more than the first 10 (ten) elements.
            A negative value (e.g. -1) will dump all elements and positive value will dump no more than the first <c>MaxLength</c>.
            </para></summary>
      <remarks>
            Applicable to properties of string or sequence types only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.LabelFormat">
      <summary>
            Gets or sets the format of the label of the properties. The default is: "{0,-24} = " 
            where the placeholder 0 will be replaced by the name of the property.
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.ValueFormat">
      <summary>
            Applies mostly to properties of basic types (primitives, enum, string, Guid, DateTime, DateTimeOffset, TimeSpan, Uri.)
            Gets or sets the format string that should be applied to the value for dumping. The default is "{0}".
            For complex types the <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" /> recognizes special value for this property - "ToString()" in this case the returned value  
            of the property's method <see cref="P:ToString" /> is inserted in the underlying text writer.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.DumpClass">
      <summary>
            Gets or sets a dump class which has a method that implements custom formatting of the property's value. 
            The <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" /> searches for a method specified by the attribute property <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpMethod" /> 
            in the class specified by this property and invokes it in order to output the text 
            representation of the property to which it is applied. If <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpMethod" /> is not specified the <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" /> 
            assumes that the name of the dump method is "Dump".
            </summary>
      <seealso cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpMethod" />
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpAttribute.DumpMethod">
      <summary>
            Gets or sets the name of the dump method in the class specified by <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpClass" />. The dump method implements custom formatting of the property's value. 
            The method must be static, public, have a return type of <see cref="T:String" /> and must take a single parameter of type or a base type of the property. 
            If the <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DumpClass" /> is not specified then the <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" /> will look for a parameterless instance method by the same name in the
            property's class or a static method with parameter the type or a base type of the property in the property's class, base class or the metadata class.
            </summary>
      <remarks>
            Applicable to properties only.
            </remarks>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.IsDefaultAttribute">
      <summary>
            When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.
            </summary>
      <returns>true if this instance is the default attribute for the class; otherwise, false.</returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>DumpAttribute.</returns>
      <ensures csharp="Contract.Result&lt;vm.Aspects.Diagnostics.DumpAttribute&gt;() != (vm.Aspects.Diagnostics.DumpAttribute)null" vb="Contract.Result(Of vm.Aspects.Diagnostics.DumpAttribute)() &lt;&gt; ((vm.Aspects.Diagnostics.DumpAttribute)Nothing) ">result != (vm.Aspects.Diagnostics.DumpAttribute)null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.Equals(vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Indicates whether the current object is equal to a reference to another object of the same type.
            </summary>
      <param name="other">A reference to another object of type <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> to compare with this object.</param>
      <returns>
        <c>false</c> if <paramref name="other" /> is equal to <c>null</c>, otherwise
            <c>true</c> if <paramref name="other" /> refers to <c>this</c> object, otherwise
            <c>true</c> if all the properties of the current object and the <paramref name="other" /> are equal by value.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.Equals(System.Object)">
      <summary>
            Determines whether this <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> instance is equal to the specified <see cref="T:System.Object" /> reference.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> reference to compare with this <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> object.</param>
      <returns>
        <c>false</c> if <paramref name="obj" /> is equal to <c>null</c>, otherwise
            <c>true</c> if <paramref name="obj" /> refers to <c>this</c> object, otherwise
            <c>true</c> if <paramref name="obj" /><i>is an instance of</i><see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> and 
            properties of the current object and the <paramref name="obj" /> are equal by value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.GetHashCode">
      <summary>
            Serves as a hash function for the objects of <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> and its derived types.
            </summary>
      <returns>A hash code for the current <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> instance.</returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.op_Equality(vm.Aspects.Diagnostics.DumpAttribute,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Compares two <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> objects.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the objects are considered to be equal (<see cref="M:IEquatable.Equals{DumpAttribute}" />);
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.op_Inequality(vm.Aspects.Diagnostics.DumpAttribute,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Compares two <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> objects.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the objects are not considered to be equal (<see cref="M:IEquatable.Equals{DumpAttribute}" />);
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpFormat">
      <summary>
            Class DumpFormat exposes most of the format strings used by the dumper so that they can be changed programmatically.
            </summary>
      <invariant>!string.IsNullOrEmpty(CyclicalReference)</invariant>
      <invariant>!string.IsNullOrEmpty(Delegate)</invariant>
      <invariant>!string.IsNullOrEmpty(Enum)</invariant>
      <invariant>!string.IsNullOrEmpty(GenericParam)</invariant>
      <invariant>!string.IsNullOrEmpty(IndexerIndexType)</invariant>
      <invariant>!string.IsNullOrEmpty(MemberInfoMemberType)</invariant>
      <invariant>!string.IsNullOrEmpty(MethodInfo)</invariant>
      <invariant>!string.IsNullOrEmpty(MethodParameter)</invariant>
      <invariant>!string.IsNullOrEmpty(DefaultPropertyLabel)</invariant>
      <invariant>!string.IsNullOrEmpty(SequenceDumpTruncated)</invariant>
      <invariant>!string.IsNullOrEmpty(SequenceType)</invariant>
      <invariant>!string.IsNullOrEmpty(SequenceTypeName)</invariant>
      <invariant>!string.IsNullOrEmpty(Type)</invariant>
      <invariant>!string.IsNullOrEmpty(TypeInfo)</invariant>
      <invariant>!string.IsNullOrEmpty(Value)</invariant>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpFormat.Reset">
      <summary>
            Resets the properties to their default values.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.CyclicalReference">
      <summary>
            Gets or sets the format of the string which designates a cyclical reference - an object that has already been duped.
            Parameters: 0 - type name, 1 - type namespace and 2 - assembly qualified name of the type.
            Default: "{0} (see above)"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.Delegate">
      <summary>
            Gets or sets the dump format for delegate objects.
            Parameters: 0 - declaring type name, 1 - declaring type namespace, 2 - assembly qualified name of the declaring type, 3 - the name of the method and 4 - access modifier (e.g. 'static ').
            Default: "{4}{0}.{3}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.Enum">
      <summary>
            Gets or sets the dump format for enum values.
            Parameters: 0 - declaring type name, 1 - declaring type namespace, 2 - assembly qualified name of the declaring type and 3 - the value.
            Default: "{0}.{3}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.GenericParam">
      <summary>
            Gets or sets the dump format for generic parameters.
            Parameters: 0 - declaring type name, 1 - declaring type namespace, 2 - assembly qualified name of the declaring type
            Default: "{0}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.IndexerIndexType">
      <summary>
            Gets or sets the dump format for the type of the indexers' indexes.
            Parameters: 0 - type name, 1 - type namespace, 2 - assembly qualified name of the type
            Default: "{0}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.MemberInfoMemberType">
      <summary>
            Gets or sets the dump format for objects of type <seealso cref="T:System.Reflection.MemberInfo" />.
            Parameters: 0 - value
            Default: "{0}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.MethodInfo">
      <summary>
            Gets or sets the dump format <see cref="P:vm.Aspects.Diagnostics.DumpFormat.MethodInfo" />.
            Parameters: 0 - return type name, 1 - return type namespace, 2 - assembly qualified name of the return type, 
            3 - declaring type name, 4 - declaring type namespace, 5 - assembly qualified name of the declaring type, 6 - method name.
            Default: "{0} {3}.{6}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.MethodParameter">
      <summary>
            Gets or sets the dump format for method parameters.
            Parameters: 0 - parameter type name, 1 - parameter type namespace, 2 - assembly qualified name of the parameter type, 3 - parameter name.
            Default: "{0} {3}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.DefaultPropertyLabel">
      <summary>
            Gets or sets the dump format for a property dump label.
            Parameters: 0 - property name.
            Default: "{0,-24} = "
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.SequenceDumpTruncated">
      <summary>
            Gets or sets the dump format for the string designating that a sequence dump has been truncated.
            Parameters: 0 - the maximum number of dumped sequence elements.
            Default: "... dumped the first {0} elements."
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.SequenceTypeName">
      <summary>
            Gets or sets the dump format for the type of a sequence.
            Parameters: 0 - sequence type name, 1 - number of elements in the sequence.
            Default: "{0}[{1}]: "
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.SequenceType">
      <summary>
            Gets or sets the dump format for the type of a sequence. Note that by the time this format is used, the sequence type name, 
            its generic parameters and dimension are already printed using <see cref="P:vm.Aspects.Diagnostics.DumpFormat.SequenceTypeName" />.
            Parameters: 0 - sequence type name, 1 - sequence type namespace, 2 - assembly qualified name of the sequence type, 
            Default: "({2})"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.Type">
      <summary>
            Gets or sets the dump format for a type.
            Parameters: 0 - type name, 1 - type namespace, 2 - assembly qualified name of the type, 
            Default: "{0} ({2}): "
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.TypeInfo">
      <summary>
            Gets or sets the dump format for dumped values of type <see cref="P:vm.Aspects.Diagnostics.DumpFormat.Type" />.
            Parameters: 0 - type name, 1 - type namespace, 2 - assembly qualified name of the type, 
            Default: "{2}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpFormat.Value">
      <summary>
            Gets or sets the dump format for a value.
            Parameters: 0 - the value to be dumped.
            Default: "{0}"
            </summary>
      <getter>
        <ensures csharp="!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())" vb="Not System.String.IsNullOrEmpty(Contract.Result(Of String)())">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!string.IsNullOrEmpty(value)" vb="Not System.String.IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject">
      <summary>
            Stores pair of type and object which has already been dumped in the current call.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.op_Equality(vm.Aspects.Diagnostics.DumpImplementation.DumpedObject,vm.Aspects.Diagnostics.DumpImplementation.DumpedObject)">
      <summary>
            Overloads the equals operator <c>==</c> to compare two values of this struct by invoking the <see cref="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.Equals(System.Object)" /> method.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the left operand is equal by value to the right operand; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.op_Inequality(vm.Aspects.Diagnostics.DumpImplementation.DumpedObject,vm.Aspects.Diagnostics.DumpImplementation.DumpedObject)">
      <summary>
            Overloads the not equals operator <c>!=</c> to compare two values of this struct by invoking the <see cref="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedObject.Equals(System.Object)" /> method.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>
        <c>true</c> if the left operand is not equal by value to the right operand; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpImplementation.MemberDumpOrder">
      <summary>
            Compares two PropertyInfo objects by the property Order of the dump attribute and then by Name.
            </summary>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver">
      <summary>
            Primary responsibility of the class is to retrieve the DumpAttribute instance associated with a property to be dumped from the property's 
            class or associated metadata type (buddy). For improved performance the class encapsulates a cache of PropertyInfo describing the property
            and the associated <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" />.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.SyncPropertiesDumpData">
      <summary>
            Gets the synchronization object of the cache/dictionary of property info-dump attributes.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.PropertiesDumpData">
      <summary>
            Gets the cache/dictionary of property info-dump attributes.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.GetPropertyDumpAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>
            Gets the dump attribute applied to a property.
            </summary>
      <param name="mi">The property info.</param>
      <param name="metadata">Type of the metadata.</param>
      <returns />
      <requires description="mi" exception="T:System.ArgumentNullException" csharp="(() =&gt; {
    {
        vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0 local_0 = new vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0();
        local_0.mi = mi;
    }
    return local_0.mi != (System.Reflection.MemberInfo)null; })()" vb="(() =&gt; {
    vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0 local_0 = New vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0();
    local_0.mi = mi
    return local_0.mi &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ; })()">(() =&gt; {
    {
        vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0 local_0 = new vm.Aspects.Diagnostics.DumpImplementation.PropertyDumpResolver.&lt;&gt;c__DisplayClass6_0();
        local_0.mi = mi;
    }
    return local_0.mi != (System.Reflection.MemberInfo)null; })()</requires>
      <exception cref="T:System.ArgumentNullException">mi == null</exception>
      <requires description="The parameter can be only PropertyInfo or FieldInfo type." csharp="local_0.mi is System.Reflection.PropertyInfo || local_0.mi is System.Reflection.FieldInfo" vb="local_0.mi Is System.Reflection.PropertyInfo OrElse local_0.mi Is System.Reflection.FieldInfo">local_0.mi is System.Reflection.PropertyInfo || local_0.mi is System.Reflection.FieldInfo</requires>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpUtilities">
      <summary>
            DumpUtilities
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpUtilities.Null">
      <summary>
            The string representing a null value - "&lt;null&gt;".
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.DumpUtilities.Unknown">
      <summary>
            The string representing an unknown value.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpUtilities.Indent(System.IO.TextWriter,System.Int32,System.Int32)">
      <summary>
            Appends <paramref name="indentLevel" /> times <paramref name="indentSize" /> number of spaces to the current new line sequence of the <paramref name="writer" />.
            </summary>
      <param name="writer">The writer.</param>
      <param name="indentLevel">The indent level.</param>
      <param name="indentSize">Size of the indent.</param>
      <returns>The <paramref name="writer" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="writer" /> is <c>null</c>.</exception>
      <requires description="writer" exception="T:System.ArgumentNullException" csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <exception cref="T:System.ArgumentNullException">writer == null</exception>
      <ensures csharp="Contract.Result&lt;System.IO.TextWriter&gt;() != null" vb="Contract.Result(Of System.IO.TextWriter)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpUtilities.Unindent(System.IO.TextWriter,System.Int32,System.Int32)">
      <summary>
            Removes <paramref name="indentLevel" /> times <paramref name="indentSize" /> number of spaces from the end of the current new line sequence of the <paramref name="writer" />.
            </summary>
      <param name="writer">The writer.</param>
      <param name="indentLevel">The indent level.</param>
      <param name="indentSize">Size of the indent.</param>
      <returns>The <paramref name="writer" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="writer" /> is <c>null</c>.</exception>
      <requires description="writer" exception="T:System.ArgumentNullException" csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <exception cref="T:System.ArgumentNullException">writer == null</exception>
      <ensures csharp="Contract.Result&lt;System.IO.TextWriter&gt;() != null" vb="Contract.Result(Of System.IO.TextWriter)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:vm.Aspects.Diagnostics.ExternalMetadata.WebExceptionDumpMetadata">
      <remarks />
    </member>
    <member name="P:vm.Aspects.Diagnostics.ExternalMetadata.WebExceptionDumpMetadata.Status">
      <remarks />
    </member>
    <member name="P:vm.Aspects.Diagnostics.ExternalMetadata.WebExceptionDumpMetadata.Response">
      <remarks />
    </member>
    <member name="M:vm.Aspects.Diagnostics.ExternalMetadata.WebExceptionDumpMetadata.DumpResponse(System.Net.WebResponse)">
      <remarks />
      <ensures csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:vm.Aspects.Diagnostics.IMemberInfoComparer">
      <summary>
            Interface IMemberInfoComparer implements property or field dump order comparison strategy, 
            e.g. by <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.Order" /> and then alphabetically.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.IMemberInfoComparer.SetMetadata(System.Type)">
      <summary>
            Sets the metadata which provides ordering info by means of <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.Order" /> and others.
            This method can be called before calling the <see cref="T:System.Collections.Generic.IComparer`1" /> methods. If called
            more than once and the <paramref name="metadata" /> is different the method could throw an exception.
            </summary>
      <param name="metadata">The metadata to be set.</param>
      <returns>This IPropertyInfoComparer object, allows for method chaining.</returns>
    </member>
    <member name="T:vm.Aspects.Diagnostics.ObjectTextDumper">
      <summary>
            Class ObjectTextDumper. This class cannot be inherited. The main class which dumps the requested object.
            </summary>
      <invariant description="The text writer cannot be null at any time.">_writer!=null</invariant>
      <invariant description="The length of the indent cannot be negative.">_indentLength&gt;=0</invariant>
      <invariant description="The the indent level cannot be negative.">_indentLevel&gt;=0</invariant>
      <invariant>_dumpedObjects!=null</invariant>
      <invariant>_dumpedVirtualProperties!=null</invariant>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedBasicValue(System.Object,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Dumps the value of basic types (all primitive types plus <see cref="T:System.String" />, <see cref="T:System.DateTime" />, <see cref="T:System.DateTimeOffset" />, 
            <see cref="T:System.TimeSpan" />, <see cref="T:System.Decimal" /> enum-s, <see cref="T:System.Guid" />, Uri).
            </summary>
      <param name="value">The value.</param>
      <param name="propertyDumpAttribute">The dump attribute associated with the value (e.g. property attribute).</param>
      <returns>
        <c>true</c> if the value was dumped; otherwise <c>false</c> (e.g. the value is struct)
            </returns>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._writer">
      <summary>
            The dump writer.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._isDumpWriter">
      <summary>
            Flag that the current writer is actually our DumpWriter.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._indentLevel">
      <summary>
            The current indent.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._indentLength">
      <summary>
            The number of spaces in a single indent.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._maxDepth">
      <summary>
            The current maximum depth of recursing into the aggregated objects. When it goes down to 0 - the recursion should stop.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._propertiesBindingFlags">
      <summary>
            The binding flags determining which properties to be dumped
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._fieldsBindingFlags">
      <summary>
            The binding flags determining which fields to be dumped
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._dumpedObjects">
      <summary>
            Contains references to all dumped objects to avoid infinite dumping due to cyclical references.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._dumpedVirtualProperties">
      <summary>
            Contains references to all dumped virtual properties to avoid dumping them more than once in the derived classes.
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._systemNameSpace">
      <summary>
            Matches the name space of the types within System
            </summary>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._hexadecimalSuffix">
      <summary>
            Matches a type name with hexadecimal suffix.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DefaultPropertiesBindingFlags">
      <summary>
            The default binding flags determining which properties to be dumped
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DefaultFieldsBindingFlags">
      <summary>
            The default binding flags determining which fields to be dumped
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.#ctor(System.IO.TextWriter,System.Int32,System.Int32,System.Int32,System.Reflection.BindingFlags,System.Reflection.BindingFlags)">
      <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" /> class with a text writer where to dump the object and initial indent
            level.
            </summary>
      <param name="writer">The text writer where to dump the object to.</param>
      <param name="indentLevel">The initial indent level.</param>
      <param name="indentLength">The length of the indent.</param>
      <param name="maxDumpLength">Maximum length of the dump text.</param>
      <param name="propertiesBindingFlags">The binding flags of the properties.</param>
      <param name="fieldsBindingFlags">The binding flags of the fields.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="writer" /> is <c>null</c>.</exception>
      <requires description="writer" exception="T:System.ArgumentNullException" csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <exception cref="T:System.ArgumentNullException">writer == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dump(System.Object,System.Type,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Dumps the specified object in a text form to this object's <see cref="T:System.IO.TextWriter" /> instance.
            </summary>
      <param name="value">
            The object to be dumped.
            </param>
      <param name="dumpMetadata">
            Optional metadata class to use to extract the dump parameters, options and settings. If not specified, the dump metadata will be
            extracted from the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to <paramref name="value" />'s class if specified otherwise from 
            the attributes applied within the class itself.
            </param>
      <param name="dumpAttribute">
            An explicit dump attribute to be applied at a class level. If not specified the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to 
            <paramref name="value" />'s class or <see cref="F:vm.Aspects.Diagnostics.DumpAttribute.Default" /> will be assumed.
            </param>
      <returns>
            The <paramref name="value" /> parameter.
            </returns>
      <ensures description="The indent level was not preserved." csharp="Contract.Old(this._indentLevel) == this._indentLevel" vb="Contract.Old(Me._indentLevel) = Me._indentLevel">old(this._indentLevel) == this._indentLevel</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpTopProperties(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState,System.Collections.Generic.Stack{vm.Aspects.Diagnostics.ObjectTextDumper.DumpState})">
      <summary>
            Dumps the properties with non-negative dump order.
            </summary>
      <param name="state">The current dump state.</param>
      <param name="statesWithRemainingProperties">The stack containing the states which have remaining properties.</param>
      <returns>
        <c>true</c> if this is a dump tree leaf object, the current dump item is one of:
            <list type="bullet"><item><c>typeof(System.Object)</c></item><item><see cref="T:System.Reflection.MemberInfo" /></item><item>a delegate</item><item>should not be dumped marked with <c>DumpAttribute(false)</c></item></list>
            ; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpRemainingProperties(System.Collections.Generic.Stack{vm.Aspects.Diagnostics.ObjectTextDumper.DumpState},System.Collections.Generic.Queue{vm.Aspects.Diagnostics.ObjectTextDumper.DumpState})">
      <summary>
            Dumps the properties with negative dump order.
            </summary>
      <param name="statesWithRemainingProperties">The stack containing the states which have remaining properties.</param>
      <param name="statesWithTailProperties">The queue containing the states which have tail properties.</param>
      <requires csharp="statesWithRemainingProperties != null" vb="statesWithRemainingProperties &lt;&gt; Nothing">statesWithRemainingProperties != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpTailProperties(System.Collections.Generic.IEnumerable{vm.Aspects.Diagnostics.ObjectTextDumper.DumpState})">
      <summary>
            Dumps the properties with order int.MinValue
            </summary>
      <param name="statesWithTailProperties">The bottom properties collection (usually a queue).</param>
      <requires csharp="statesWithTailProperties != null" vb="statesWithTailProperties &lt;&gt; Nothing">statesWithTailProperties != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.IsAtDumpTreeLeaf(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <summary>
            The dumping traverses depth-first a dump tree consisting of the object's properties its base classes' properties and the properties' 
            properties etc. This method determines if the recursion reached a leaf in the dump tree and that it should stop drilling down and return to 
            dump other branches of the dump tree. Recursion stops when:
            <list type="bullet"><item>
            The current examined type is <see cref="T:System.Object" />. The method dumps the object contained in <paramref name="state" />-s type name.
            </item><item>
            The current examined base class has <see cref="T:vm.Aspects.Diagnostics.DumpAttribute" /> with property <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.RecurseDump" /> set to <see cref="F:vm.Aspects.Diagnostics.ShouldDump.Skip" />. 
            If the attribute also defines the property <see cref="P:vm.Aspects.Diagnostics.DumpAttribute.DefaultProperty" /> it will dump that property only as a representing
            property of the entire class.
            </item><item>
            The examined object is a delegate. The method will dump the delegate type.
            </item><item>
            The method determines that the current object has already been dumped (discovers circular reference). The method will dump a short 
            reference text.
            </item></list>
            The current base class has class dump attribute with  examined is System.Object
            </summary>
      <param name="state">The current dump state.</param>
      <returns>
        <c>true</c> if the recursion should stop; otherwise <c>false</c>.</returns>
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.GetTypeName(System.Type)">
      <summary>
            Gets the name of a type. In case the type is a EF dynamic proxy it will return only the first portion of the name, e.g.
            from the name "SomeTypeName_CFFF21E2EAC773F63711A0F93BE77F1CBC891DE8F0E5FFC46E7C4BB2E4BCC8D3" it will return only "SomeTypeName"
            </summary>
      <param name="type">The object which type name needs to be retrieved.</param>
      <returns>The type name.</returns>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="F:vm.Aspects.Diagnostics.ObjectTextDumper._disposed">
      <summary>
            The flag is being set when the object gets disposed.
            </summary>
      <value>0 - if the object is not disposed yet, any other value - the object is already disposed.</value>
      <remarks>
            Do not test or manipulate this flag outside of the property <see cref="P:vm.Aspects.Diagnostics.ObjectTextDumper.IsDisposed" /> or the method <see cref="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose" />.
            The type of this field is Int32 so that it can be easily passed to the members of the class <see cref="T:System.Threading.Interlocked" />.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.IsDisposed">
      <summary>
            Returns <c>true</c> if the object has already been disposed, otherwise <c>false</c>.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <remarks>Invokes the protected virtual <see cref="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose(System.Boolean)" />.</remarks>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose(System.Boolean)">
      <summary>
            Performs the actual job of disposing the object.
            </summary>
      <param name="disposing">
            Passes the information whether this method is called by <see cref="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose" /> (explicitly or
            implicitly at the end of a <c>using</c> statement), or by the finalizer of <see cref="T:vm.Aspects.Diagnostics.ObjectTextDumper" />.
            </param>
      <remarks>
            If the method is called with <paramref name="disposing" /><c>==true</c>, i.e. from <see cref="M:vm.Aspects.Diagnostics.ObjectTextDumper.Dispose" />, it will try to release all managed resources 
            (usually aggregated objects which implement <see cref="T:System.IDisposable" /> as well) and then it will release all unmanaged resources if any.
            If the parameter is <c>false</c> then the method will only try to release the unmanaged resources.
            </remarks>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.Instance">
      <summary>
            Gets or sets the currently dumped instance.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.Type">
      <summary>
            Gets or sets the current type (maybe base type) of the instance being dumped.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.InstanceDumpAttribute">
      <summary>
            Gets or sets the dump attribute applied to the instance .
            </summary>
      <value>
            The instance dump attribute.
            </value>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.ClassDumpData">
      <summary>
            Gets or sets the class dump data pair - the metadata type and the class dump attribute.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.CurrentProperty">
      <summary>
            Gets the current property being dumped.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.CurrentPropertyDumpAttribute">
      <summary>
            Gets the property dump attribute applied to the current property being dumped.
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.SetToDefault">
      <summary>
            Sets the state to point to the default (representative) property if the type is not to be dumped recursively.
            </summary>
      <returns>
        <c>true</c> if the state was successfully set to the default property; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.DumpNullValues">
      <summary>
            Calculates whether null property values of the current instance should be dumped.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.RecurseDump">
      <summary>
            Calculates whether to dump recursively the current instance.
            </summary>
      <value>This property never returns <see cref="F:vm.Aspects.Diagnostics.ShouldDump.Default" />.</value>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.DefaultProperty">
      <summary>
            Gets the representative property of the current type that should not be dumped recursively.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.IEnumerator`1.get_Current" inheritedFromTypeName="IEnumerator" csharp="(decimal)Contract.Result&lt;decimal&gt;() == this.get_Model[this.get_CurrentIndex]" vb="((Object)Contract.Result(Of System.Reflection.MemberInfo)()) = Me.get_Model(Me.get_CurrentIndex)">(decimal)result == this.get_Model[this.get_CurrentIndex]</ensures>
      </getter>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
      <getter>
        <ensures inheritedFrom="M:System.Collections.IEnumerator.get_Current" inheritedFromTypeName="IEnumerator" csharp="Contract.Result&lt;decimal&gt;() == this.get_Model[this.get_CurrentIndex]" vb="Contract.Result(Of Object)() = Me.get_Model(Me.get_CurrentIndex)">result == this.get_Model[this.get_CurrentIndex]</ensures>
      </getter>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_Model == Contract.Old(this.get_Model)" vb="Me.get_Model = Contract.Old(Me.get_Model)">this.get_Model == old(this.get_Model)</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex &lt; this.get_Model.Length" vb="Me.get_CurrentIndex &lt; Me.get_Model.Length">this.get_CurrentIndex &lt; this.get_Model.Length</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex &gt;= 0" vb="Me.get_CurrentIndex &gt;= 0">this.get_CurrentIndex &gt;= 0</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex == Contract.Old(this.get_CurrentIndex) + 1" vb="Me.get_CurrentIndex = Contract.Old(Me.get_CurrentIndex) + 1">this.get_CurrentIndex == old(this.get_CurrentIndex) + 1</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="T:vm.Aspects.Diagnostics.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.CallerDoesNotHavePermissionFormat">
      <summary>
              Looks up a localized string similar to {0} (Note: The caller does not have the permission to use reflection. Therefore System.Object.ToString() on the object has been dumped instead.).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.ClassMethodDesignator">
      <summary>
              Looks up a localized string similar to static .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.CollectionCountFormat">
      <summary>
              Looks up a localized string similar to {0}[{3}].
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.Colon">
      <summary>
              Looks up a localized string similar to : .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.CyclicalReferenceDesignator">
      <summary>
              Looks up a localized string similar to {0} (see above).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.DelegateDumpFormat">
      <summary>
              Looks up a localized string similar to {4}{0}.{3}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.DumpReachedMaxDepth">
      <summary>
              Looks up a localized string similar to ...object dump reached the maximum depth level. Use the DumpAttribute.MaxDepth to increase the depth level if needed..
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.Ellipsis">
      <summary>
              Looks up a localized string similar to ....
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.EnumDumpFormat">
      <summary>
              Looks up a localized string similar to {0}.{3}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.GenericParamFormat">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.GenericParamListBegin">
      <summary>
              Looks up a localized string similar to &lt;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.GenericParamListEnd">
      <summary>
              Looks up a localized string similar to &gt;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.GenericParamSeparator">
      <summary>
              Looks up a localized string similar to , .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.IndexerEnd">
      <summary>
              Looks up a localized string similar to ].
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.IndexerIndexDumpFormat">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.IndexerStart">
      <summary>
              Looks up a localized string similar to this[.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.InstanceMethodDesignator">
      <summary>
              Looks up a localized string similar to .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MaskInLogs">
      <summary>
              Looks up a localized string similar to ******.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MaxLengthExceeded">
      <summary>
               Looks up a localized string similar to ...
            The dump exceeded the maximum length of {0} characters. Either increase the value of the argument maxDumpLength of the constructor of the ObjectTextDumper class, or suppress the dump of some types and properties using DumpAttribute-s and metadata..
             </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MemberInfoMemberTypeDumpFormat">
      <summary>
              Looks up a localized string similar to ({0}): .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MethodInfoDumpFormat">
      <summary>
              Looks up a localized string similar to {0} {3}.{6}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MethodParameterFormat">
      <summary>
              Looks up a localized string similar to {0} {3}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MethodParameterListBegin">
      <summary>
              Looks up a localized string similar to (.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.MethodParameterListEnd">
      <summary>
              Looks up a localized string similar to ).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.ParametersSeparator">
      <summary>
              Looks up a localized string similar to , .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.PropertyBegin">
      <summary>
              Looks up a localized string similar to  { .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.PropertyEnd">
      <summary>
              Looks up a localized string similar to  }.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.PropertyGetter">
      <summary>
              Looks up a localized string similar to get;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.PropertyLabelFormat">
      <summary>
              Looks up a localized string similar to {0,-24} = .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.PropertySetter">
      <summary>
              Looks up a localized string similar to set;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.RegexSystemNamespace">
      <summary>
              Looks up a localized string similar to System(\..+)?.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.SequenceDumpTruncatedFormat">
      <summary>
              Looks up a localized string similar to ... dumped the first {0} elements..
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.SequenceParamListBegin">
      <summary>
              Looks up a localized string similar to &lt;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.SequenceParamListEnd">
      <summary>
              Looks up a localized string similar to &gt;[{0}]: .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.SequenceTypeFormat">
      <summary>
              Looks up a localized string similar to ({2}).
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.SequenceTypeNameFormat">
      <summary>
              Looks up a localized string similar to {0}[{1}]: .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.StringNull">
      <summary>
              Looks up a localized string similar to &lt;null&gt;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.StringSingleIndent">
      <summary>
              Looks up a localized string similar to   .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.StringUnknown">
      <summary>
              Looks up a localized string similar to &lt;unknown&gt;.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.TypeDumpFormat">
      <summary>
              Looks up a localized string similar to {0} ({2}): .
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.TypeInfoFormat">
      <summary>
              Looks up a localized string similar to {2}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.ValueFormat">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="P:vm.Aspects.Diagnostics.Properties.Resources.ValueFormatToString">
      <summary>
              Looks up a localized string similar to ToString().
            </summary>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ServiceResolver.DoGetAllInstances(System.Type)">
      <summary>
            Does the actual work of resolving all the requested service instances.
            </summary>
      <param name="serviceType">Type of service requested.</param>
      <returns>Sequence of service instance objects.</returns>
      <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">Thrown if the service type is not supported.</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ServiceResolver.DoGetInstance(System.Type,System.String)">
      <summary>
            Does the actual work of resolving the requested service instance.
            </summary>
      <param name="serviceType">Type of instance requested.</param>
      <param name="key">Name of registered service you want. May be null.</param>
      <returns>The requested service instance.</returns>
      <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">
            Thrown if the service type is not supported.
            </exception>
    </member>
    <member name="T:vm.Aspects.Constants">
      <summary>
            Defines some constants used throughout the Aspects library
            </summary>
    </member>
    <member name="F:vm.Aspects.Constants.HashInitializer">
      <summary>
            Used for computing hash codes (the prime 23).
            </summary>
    </member>
    <member name="F:vm.Aspects.Constants.HashMultiplier">
      <summary>
            Used for computing hash codes (the prime 17).
            </summary>
    </member>
    <member name="T:vm.Aspects.Extensions">
      <summary>
            Class Extensions. Adds extension methods for easy dumping of objects, as well as a few useful reflection methods not available in .NET 4.0.
            </summary>
    </member>
    <member name="M:vm.Aspects.Extensions.DumpText(System.Object,System.IO.TextWriter,System.Int32,System.Type,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Dumps the specified <paramref name="value" /> to a text writer.
            </summary>
      <param name="value">The object to dump.</param>
      <param name="writer">The text writer to dump to.</param>
      <param name="indentLevel">The initial indent level.</param>
      <param name="dumpMetadata">
            Optional metadata class to use to extract the dump attributes from. If not specified, the dump metadata will be sought in
            a <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to the <paramref name="value" />'s class. And if that is not found - from the 
            attributes applied within the class itself.
            </param>
      <param name="dumpAttribute">
            An explicit dump attribute to be applied at a class level. If not specified the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to 
            <paramref name="value" />'s class and if that is not specified - <see cref="F:vm.Aspects.Diagnostics.DumpAttribute.Default" /> will be assumed.
            </param>
      <returns>
            The object.
            </returns>
      <requires description="writer" exception="T:System.ArgumentNullException" csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <exception cref="T:System.ArgumentNullException">writer == null</exception>
    </member>
    <member name="M:vm.Aspects.Extensions.DumpString(System.Object,System.Int32,System.Type,vm.Aspects.Diagnostics.DumpAttribute)">
      <summary>
            Dumps the <paramref name="value" /> to a string.
            </summary>
      <param name="value">The object to dump.</param>
      <param name="indentLevel">The initial indent level.</param>
      <param name="dumpMetadata">
            Optional metadata class to use to extract the dump attributes from. If not specified, the dump metadata will be sought in
            a <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to the <paramref name="value" />'s class. And if that is not found - from the 
            attributes applied within the class itself.
            </param>
      <param name="dumpAttribute">
            An explicit dump attribute to be applied at a class level. If not specified the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> attribute applied to 
            <paramref name="value" />'s class and if that is not specified - <see cref="F:vm.Aspects.Diagnostics.DumpAttribute.Default" /> will be assumed.
            </param>
      <returns>The text dump of the object.</returns>
      <ensures csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Extensions.IsBasicType(System.Type)">
      <summary>
            Determines whether the specified type is basic: primitive, enum, decimal, string, Guid, Uri, DateTime, TimeSpan, DateTimeOffset, IntPtr, 
            UIntPtr.
            </summary>
      <param name="type">The type to be tested.</param>
      <returns>
        <c>true</c> if the specified type is one of the basic types; otherwise, <c>false</c>.
            </returns>
      <requires description="type" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:vm.Aspects.Extensions.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
      <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member.
            </summary>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <param name="attributeProvider">The member to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of element; otherwise, <see langword="false" /> (the default).</param>
      <returns>A custom attribute that matches <typeparamref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeProvider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if more than one attribute of the specified type <typeparamref name="T" /> is found.</exception>
      <requires description="attributeProvider" csharp="attributeProvider != null" vb="attributeProvider &lt;&gt; Nothing">attributeProvider != null</requires>
    </member>
    <member name="M:vm.Aspects.Extensions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
      <summary>
            Retrieves all custom attributes of a specified type that are applied to a specified member.
            </summary>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <param name="attributeProvider">The member to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of element; otherwise, <see langword="false" /> (the default).</param>
      <returns>A sequence of custom attributes that match <typeparamref name="T" /> (possibly empty).</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeProvider" /> is <see langword="null" />.</exception>
      <requires description="attributeProvider" csharp="attributeProvider != null" vb="attributeProvider &lt;&gt; Nothing">attributeProvider != null</requires>
    </member>
    <member name="M:vm.Aspects.Extensions.IsVirtual(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified <see cref="T:System.Reflection.PropertyInfo" /> object represents a virtual property.
            </summary>
      <param name="mi">The <see cref="T:System.Reflection.PropertyInfo" /> object.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Reflection.PropertyInfo" /> object represents a virtual property; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="mi" /> is <see langword="null" />.</exception>
      <requires description="pi" csharp="mi != (System.Reflection.MemberInfo)null" vb="mi &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">mi != (System.Reflection.MemberInfo)null</requires>
    </member>
    <member name="M:vm.Aspects.Extensions.CanRead(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified <see cref="T:System.Reflection.PropertyInfo" /> object represents a property that can be read.
            </summary>
      <param name="mi">The <see cref="T:System.Reflection.PropertyInfo" /> object.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Reflection.PropertyInfo" /> object represents a virtual property that can be read; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="mi" /> is <see langword="null" />.</exception>
      <requires description="pi" csharp="mi != (System.Reflection.MemberInfo)null" vb="mi &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">mi != (System.Reflection.MemberInfo)null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpAttribute.System#ICloneable#Clone">
      <ensures inheritedFrom="M:System.ICloneable.Clone" inheritedFromTypeName="ICloneable" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of Object)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpStringValue(System.Object,System.IO.TextWriter,System.Int32)">
      <requires csharp="v != null" vb="v &lt;&gt; Nothing">v != null</requires>
      <requires csharp="v is string" vb="v Is String">v is string</requires>
      <requires csharp="w != null" vb="w &lt;&gt; Nothing">w != null</requires>
      <requires csharp="max &gt;= 0" vb="max &gt;= 0">max &gt;= 0</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpEnumValue(System.Object,System.IO.TextWriter,System.Int32)">
      <requires csharp="v != null" vb="v &lt;&gt; Nothing">v != null</requires>
      <requires csharp="w != null" vb="w &lt;&gt; Nothing">w != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpObjectOfNonBasicValue(System.Object,System.Type,vm.Aspects.Diagnostics.DumpAttribute)">
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedCollectionObject(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState,System.Boolean)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpProperty(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedPropertyCustom(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState,System.Object,System.Type)">
      <requires description="state" exception="T:System.ArgumentNullException" csharp="(() =&gt; {
    {
        vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0 local_0 = new vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0();
    }
    return state != null; })()" vb="(() =&gt; {
    vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0 local_0 = New vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0();
    return state &lt;&gt; Nothing; })()">(() =&gt; {
    {
        vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0 local_0 = new vm.Aspects.Diagnostics.ObjectTextDumper.&lt;&gt;c__DisplayClass36_0();
    }
    return state != null; })()</requires>
      <exception cref="T:System.ArgumentNullException">state == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedAlready(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedRootClass(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedDelegate(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedSequenceObject(System.Collections.IEnumerable,vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <requires description="dumpAttribute" exception="T:System.ArgumentNullException" csharp="dumpAttribute != (vm.Aspects.Diagnostics.DumpAttribute)null" vb="dumpAttribute &lt;&gt; ((vm.Aspects.Diagnostics.DumpAttribute)Nothing) ">dumpAttribute != (vm.Aspects.Diagnostics.DumpAttribute)null</requires>
      <exception cref="T:System.ArgumentNullException">dumpAttribute == null</exception>
      <requires csharp="sequence != null" vb="sequence &lt;&gt; Nothing">sequence != null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpedDefaultProperty(vm.Aspects.Diagnostics.ObjectTextDumper.DumpState)">
      <requires csharp="state != null" vb="state &lt;&gt; Nothing">state != null</requires>
      <requires csharp="!(state.RecurseDump &lt;= (vm.Aspects.Diagnostics.ShouldDump)0)" vb="!(state.RecurseDump &lt;= ((vm.Aspects.Diagnostics.ShouldDump)0))">!(state.RecurseDump &lt;= (vm.Aspects.Diagnostics.ShouldDump)0)</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ObjectTextDumper.DumpState.System#Collections#IEnumerator#get_Current">
      <ensures inheritedFrom="M:System.Collections.IEnumerator.get_Current" inheritedFromTypeName="IEnumerator" csharp="Contract.Result&lt;decimal&gt;() == this.get_Model[this.get_CurrentIndex]" vb="Contract.Result(Of Object)() = Me.get_Model(Me.get_CurrentIndex)">result == this.get_Model[this.get_CurrentIndex]</ensures>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ExternalMetadata.TaskDumpMetadata.System#IAsyncResult#get_AsyncWaitHandle">
      <ensures inheritedFrom="M:System.IAsyncResult.get_AsyncWaitHandle" inheritedFromTypeName="IAsyncResult" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of System.Threading.WaitHandle)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:vm.Aspects.Diagnostics.ExternalMetadata.TaskDumpMetadata.System#IAsyncResult#AsyncWaitHandle">
      <getter>
        <ensures inheritedFrom="M:System.IAsyncResult.get_AsyncWaitHandle" inheritedFromTypeName="IAsyncResult" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of System.Threading.WaitHandle)() &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter">
      <invariant description="The underlying writer is null.">_writer!=null</invariant>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.#ctor(System.IO.StringWriter,System.Int32)">
      <requires description="writer" exception="T:System.ArgumentNullException" csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
      <exception cref="T:System.ArgumentNullException">writer == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.#ctor(System.Text.StringBuilder,System.Int32)">
      <requires description="existing" exception="T:System.ArgumentNullException" csharp="existing != null" vb="existing &lt;&gt; Nothing">existing != null</requires>
      <exception cref="T:System.ArgumentNullException">existing == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.Write(System.String)">
      <ensuresOnThrow description="An I/O error occurs." inheritedFrom="M:System.IO.TextWriter.Write(System.String)" inheritedFromTypeName="TextWriter" exception="T:System.IO.IOException">true</ensuresOnThrow>
      <exception cref="T:System.IO.IOException">true will be true on throw.</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.Write(System.Char)">
      <ensuresOnThrow description="An I/O error occurs." inheritedFrom="M:System.IO.TextWriter.Write(System.Char)" inheritedFromTypeName="TextWriter" exception="T:System.IO.IOException">true</ensuresOnThrow>
      <exception cref="T:System.IO.IOException">true will be true on throw.</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="buffer.Length - index &gt;= count" vb="buffer.Length - index &gt;= count">buffer.Length - index &gt;= count</requires>
      <ensuresOnThrow description="An I/O error occurs." inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" exception="T:System.IO.IOException">true</ensuresOnThrow>
      <exception cref="T:System.IO.IOException">true will be true on throw.</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.WriteCharBuffer(System.Char[],System.Int32,System.Int32)">
      <requires description="The writer is closed." exception="T:System.InvalidOperationException" csharp="!this.IsClosed" vb="Not Me.IsClosed">!this.IsClosed</requires>
      <exception cref="T:System.InvalidOperationException">IsClosed</exception>
      <requires description="buffer" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <requires description="The parameter index must be non-negative." csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires description="The parameter count must be non-negative." csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires description="The parameters index or count have invalid values." csharp="buffer.Length - index &gt;= count" vb="buffer.Length - index &gt;= count">buffer.Length - index &gt;= count</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.Encoding">
      <getter>
        <ensures inheritedFrom="M:System.IO.TextWriter.get_Encoding" inheritedFromTypeName="TextWriter" csharp="Contract.Result&lt;decimal&gt;() != null" vb="Contract.Result(Of System.Text.Encoding)() &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:vm.Aspects.Diagnostics.DumpImplementation.DumpTextWriter.NewLine">
      <getter>
        <ensures inheritedFrom="M:System.IO.TextWriter.get_NewLine" inheritedFromTypeName="TextWriter" csharp="Contract.Result&lt;string&gt;() != null" vb="Contract.Result(Of String)() &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.IO.TextWriter.set_NewLine(System.String)" inheritedFromTypeName="TextWriter" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.#ctor(System.Object,System.String)">
      <requires description="instance" exception="T:System.ArgumentNullException" csharp="instance != null" vb="instance &lt;&gt; Nothing">instance != null</requires>
      <exception cref="T:System.ArgumentNullException">instance == null</exception>
      <requires description="property" exception="T:System.ArgumentNullException" csharp="property != null" vb="property &lt;&gt; Nothing">property != null</requires>
      <exception cref="T:System.ArgumentNullException">property==null</exception>
      <requires description="The argument property cannot be empty or consist of whitespace characters only." exception="T:System.ArgumentException" csharp="property.Length &gt; 0" vb="property.Length &gt; 0">property.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentException">property.Length &lt;= 0</exception>
      <requires description="The argument property cannot be empty or consist of whitespace characters only." exception="T:System.ArgumentException" csharp="(() =&gt; {
    {
        push property;
        push vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0;
        if (dup == default(System.Func&lt;char, bool&gt;))
        {
            pop;
            push (char c) =&gt; !char.IsWhiteSpace(c);
            vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0 = dup;
        }
    }
    return System.Linq.Enumerable.Any&lt;char&gt;(pop, pop); })()" vb="(() =&gt; {
    push property;
    push vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0;
    If dup = Nothing Then
    pop
    push (c As Char ) =&gt; Not System.Char.IsWhiteSpace(c);
    vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0 = dup
    return System.Linq.Enumerable.Any(pop, pop); })()">(() =&gt; {
    {
        push property;
        push vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0;
        if (dup == default(System.Func&lt;char, bool&gt;))
        {
            pop;
            push (char c) =&gt; !char.IsWhiteSpace(c);
            vm.Aspects.Diagnostics.DumpImplementation.DumpedProperty.&lt;&gt;c.&lt;&gt;9__2_0 = dup;
        }
    }
    return System.Linq.Enumerable.Any&lt;char&gt;(pop, pop); })()</requires>
      <exception cref="T:System.ArgumentException">!(property.Any(c =&gt; !char.IsWhiteSpace(c)))</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.ExtractClassDumpData(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.TryGetClassDumpData(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.AddClassDumpData(System.Type,System.Type,vm.Aspects.Diagnostics.DumpAttribute,System.Boolean)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:vm.Aspects.Diagnostics.ClassMetadataResolver.AddClassDumpData(System.Type,vm.Aspects.Diagnostics.ClassDumpData,System.Boolean)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
  </members>
</doc>